#+title: CSC Project Program Rust Workshop
#+author: Daniel Liu

* A Rusty Workshop


                       ,--.  ,--.                        
,--.--.,--.,--. ,---.,-'  '-.|  | ,--,--.,--,--,  ,---.  
|  .--'|  ||  |(  .-''-.  .-'|  |' ,-.  ||      \| .-. | 
|  |   '  ''  '.-'  `) |  |  |  |\ '-'  ||  ||  |' '-' ' 
`--'    `----' `----'  `--'  `--' `--`--'`--''--'.`-  /  
                                                 `---'   
                                                                                               
                                                                   ████      ████              
                                                                 ██▒▒▒▒██  ▓▓▒▒▒▒▓▓            
                                                   ██████      ██▒▒░░░░▒▒██▒▒░░▒▒██            
                                                 ██  ██████    ██▒▒░░░░░░▒▒░░░░▒▒██            
                             ██████              ██████  ██    ██▒▒░░░░░░░░░░░░▒▒██            
           ▓▓▓▓            ▓▓  ████▓▓      ▓▓▓▓▓▓██████████▓▓  ██▒▒░░░░░░░░░░░░▒▒██            
         ▓▓▒▒██      ████  ██████░░██▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▓▓██▒▒░░░░░░░░░░░░▒▒██            
       ██▒▒░░▒▒██  ██▒▒██  ██████████▒▒▒▒▒▒░░░░░░            ▒▒▒▒██▒▒░░░░░░░░▒▒██              
     ██▒▒░░  ░░▒▒██▒▒▒▒██    ████▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░      ▒▒██▒▒▒▒▒▒▒▒██                
     ██▒▒░░░░░░░░▒▒░░▒▒██  ▓▓▒▒▒▒░░░░░░░░▒▒░░░░▒▒░░░░░░░░          ▒▒████████                  
     ██▒▒░░░░░░░░░░░░▒▒████▒▒░░░░░░░░░░▒▒██▒▒▒▒██▒▒░░░░░░        ░░  ▒▒██                      
     ██▒▒░░░░░░░░░░░░▒▒██▒▒░░    ░░░░░░▒▒██▒▒▒▒██▒▒░░░░░░░░      ░░  ▒▒██▓▓▓▓▓▓                
       ▓▓▒▒▒▒░░░░░░░░▒▒██▒▒      ░░░░░░░░▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░  ░░▒▒██▒▒▒▒▓▓              
         ████▒▒▒▒▒▒▒▒██▒▒▒▒      ░░░░░░░░░░▒▒▒▒▒▒██████████▒▒░░░░░░░░  ▒▒██▒▒▒▒██              
             ██████████▒▒      ░░░░░░░░░░▒▒██████░░░░░░░░  ██▒▒░░░░░░  ▒▒██████                
                     ██▒▒░░░░░░░░░░░░░░▒▒██░░░░░░░░░░██████░░██▒▒░░░░  ▒▒██                    
               ████████▒▒░░░░░░░░░░░░▒▒██░░░░░░██████░░░░░░░░██▒▒░░    ▒▒██                    
             ▒▒▒▒▒▒▒▒██▒▒░░░░░░░░░░▒▒▓▓██▓▓▒▒▒▒░░░░░░░░░░░░░░░░▓▓▒▒  ░░▓▓▒▒▒▒▒▒                
             ██▒▒▒▒▒▒██▒▒░░░░░░░░░░▒▒██░░░░░░░░░░░░░░░░░░░░░░░░██▒▒  ▒▒██▒▒▒▒▒▒▓▓              
               ████████▒▒░░░░░░░░░░▒▒██░░░░░░░░░░░░░░░░██████████▒▒  ▒▒██▒▒▒▒▒▒██              
                       ▓▓▒▒░░░░░░▒▒▓▓░░░░░░░░▓▓▓▓▓▓▓▓▓▓░░░░░░░░██▒▒▒▒▓▓██████▓▓                
                     ████▒▒░░░░░░▒▒██████████░░░░░░░░░░░░░░░░░░██▒▒██                          
                   ▓▓▒▒▒▒██▒▒▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░██████                            
                   ██▒▒▒▒▒▒██████▒▒██░░░░░░░░░░░░░░░░████████                                  
                   ████████      ████████████████████                                          
                                                                                               
                                                                                               
                                                                                               
                                                                                               
                                                                                               
                                                                                               
                                                                                               

* Structure of this workshop

Will walk through creating a simple library for creating CLIs while
walking through rust basics. You do not need to follow along.

After we will use this library to build your very own CLI. You are
encouraged to follow along for this part.

* Where slides at

Slides are avaliable on github at (https://github.com/MrPicklePinosaur/rust_workshop)
in the form of an org mode document (basically md).

* Why Rust

#+begin_src rust
  fn main() {
      println!("hello from rust!");
  }
#+end_src

#+RESULTS:
: hello from rust!

- safe: borrow checker ensures memory safety
- (blazenly) fast: llvm backend for compiler optimization
- compile time chceks: rust attempts to move as many things as possible to
  compile time, so the compiler can catch mistakes much faster
- developer tooling: great developer experience, with official tools for testing,
  linting, language server support, documentation generation and much more
- cross-platform
- fun to write

* Downsides of rust

- compilation time: much more complicated compile process results in longer compile times
- huge footprint: the target directory can get very large very fast

* Installation

We can use `rustup` to install and manage rust toolchains and
additional components like an rust-analyzer (an LSP),
cross-compilation targets and clippy (linter).

From the terminal we can run:
#+begin_src sh
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#+end_src

And follow the on screen instructions.

* Basic tools

- rustc: the rust compiler
- cargo: package manager
- clippy: linter
- rustfmt: rust code formatter

* Project creation

#+begin_src sh
cargo new argparse
#+end_src

* Projcet structure

argparse
├── Cargo.lock
├── Cargo.toml
├── src
│   └── main.rs
└── target

- Cargo.lock contains information about dependencies, we normally don't touch this file.
- Cargo.toml contains general package information, project configuration and dependencies.
- src/ is the directory for your source code
- target/ is the build directory for binaries and documentation

** Let's add some information to Cargo.toml

#+begin_src yaml
[package]
name = "argparse"
version = "0.1.0"
edition = "2021"
authors = ["Daniel Liu"]
description = "simple argparser created for CSC rust workshop"
repository = "https://github.com/MrPicklePinosaur/rust_workshop"
license = "MIT OR Apache-2.0"

[dependencies]
#+end_src

* Compiling and running the project

Only builds your project
#+begin_src sh
cargo build
#+end_src

Checks if your project compiles properly (faster to run than cargo build)
#+begin_src sh
cargo check
#+end_src

Compiles and runs your project
#+begin_src sh
cargo run
#+end_src

* Concepts we will be covering

Topics to cover
- println macro
- structs and methods on structs
- visibility
- if, if let and match statements
- ownership
- mutability
- implemting traits
- enums
- Result and Option types
- builder pattern
- using crates
- loops + iterators

* 1. Hello world

#+begin_src rust
  /// 1.rs

  fn main() {
      println!("hello from rust!");
  }
#+end_src

#+RESULTS:
: hello from rust!

What's new
- `main` function
- `println!` macro

* 2. Get environment variables

#+begin_src rust
  /// 2.rs

  fn main() {
      let args: Vec<String> = std::env::args().collect();
      println!("arguments {:?}", args);
  }
#+end_src

What's new
- Variable declaration with let, followed with type declaration (can import modules using `use` keyword)
- Namespacing (with modules), using `::`
- `args()` returns an iterator (more on this later)
- Can use templating syntax inside `println!`

* 3. Structs

#+begin_src rust
  /// 3.rs

  pub struct Cli {
      pub program_name: String,
  }

  fn main() {
      let args: Vec<String> = std::env::args().collect();
      println!("arguments {:?}", args);

      let my_cli = Cli {
	  program_name: "my program".to_string(),
      };
  }
#+end_src

What's new
- Defining structs with fields
- Visibility (private by default, `pub` keyword)
- Why `to_string()`? (`String` type vs `&str`)

* 4. Functions on structs

#+begin_src rust
  /// 4.rs

  pub struct Cli {
      pub program_name: String,
  }

  impl Cli {
      pub fn run(&self, args: &Vec<String>) {
	  println!("[{}] {:?}", self.program_name, args);
      }
  }

  fn main() {
      let args = std::env::args().collect::<Vec<String>>();

      let my_cli = Cli {
	  program_name: "my program".to_string(),
      };
      my_cli.run(&args);
  }
#+end_src

What's new
- `impl` block
- Taking `self` as an argument
- References
- Why no type annotation on `my_cli`? (turbofish provides explicit type for generic function)

* 5. Reading an argument

** The Option Type

#+begin_src rust
  pub struct Cli {
      pub program_name: String,
  }

  // Signature of `Option` type
  enum MyOption<T> {
      Some(T),
      None
  }

  impl Cli {
      pub fn run(&self, args: &Vec<String>) {
	  let argument: Option<&String> = args.get(1);
      }
  }

  fn main() {
      let args = std::env::args().collect::<Vec<String>>();

      let my_cli = Cli {
	  program_name: "my program".to_string(),
      };
      my_cli.run(&args);
  }
#+end_src

What's new
- enum keyword
- Generics
- `Option` type

** If and Match

#+begin_src rust
  /// 5.rs

  pub struct Cli {
      pub program_name: String,
  }

  impl Cli {
      pub fn run(&self, args: &Vec<String>) {
	  let argument: Option<&String> = args.get(1);

	  if let Some(arg) = argument {
	      println!("argument is {}", arg);
	  } else {
	      println!("uh oh, we did not get an argument");
	  }

	  // ====== alternatively ======
	  match argument {
	      Some(arg) => {
		  println!("argument is {}", arg);
	      },
	      None => {
		  println!("uh oh, we did not get an argument"); 
	      }
	  }
      }
  }

  fn main() {
      let args = std::env::args().collect::<Vec<String>>();

      let my_cli = Cli {
	  program_name: "my program".to_string(),
      };
      my_cli.run(&args);
  }
#+end_src

What's new
- `if let` statement
- `match` statement (`_` for catchall)

* 6. Error handling

#+begin_src rust
  /// 6.rs

  pub struct Cli {
      pub program_name: String,
  }

  // Signature of `Result` type
  enum MyResult<T, E> {
      Ok(T),
      Err(E),
  }

  impl Cli {
      pub fn run(&self, args: &Vec<String>) -> Result<(), Box<dyn std::error::Error>> {
	  let argument: Option<&String> = args.get(1);

	  let arg_value = if let Some(arg) = argument {
	      println!("argument is {}", arg);
	      arg
	  } else {
	      println!("uh oh, we did not get an argument");
	      // What should we put in the ... ?
	      // return Err(...)
	      "error"
	  };

	  // do something with arg_value
	  println!("the value of arg_value is {}", arg_value);

	  Ok(())
      }
  }

  fn main() {
      let args = std::env::args().collect::<Vec<String>>();

      let my_cli = Cli {
	  program_name: "my program".to_string(),
      };
      my_cli.run(&args);
  }
#+end_src

What's new
- Blocks have return values
- `Result` type

Is there an easier way to convert from an `Option` to a `Result`?

* 7. Side Adventure: Implementing our own Error type

#+begin_src rust
  /// 7.rs
  
  #[derive(Debug)]
  pub enum CliError {
      NoArgument,
  }

  impl std::error::Error for CliError {}

  impl std::fmt::Display for CliError {
      fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
	  match self {
	      Self::NoArgument => write!(f, "Argument not supplied"),
	  }
      }
  }

  fn main() {
      let my_error = CliError::NoArgument;
      println!("This is the debug formatter: {:?}", my_error);
      println!("This is the display formatter: {}", my_error);
  }
#+end_src

What's new
- Traits (inheritence/interfaces but a bit different) and implementing traits
- `write!()` is very similar to `println!()`, but to a specified output 'stream'
- `#[derive(Debug)]` is example of a derive macro, it auto generates the code to implement the `Debug` trait

* 8. Using our Error type

** Use CliError type

#+begin_src rust
  impl Cli {
      pub fn run(&self, args: &Vec<String>) -> Result<(), CliError> {
	  let argument: Option<&String> = args.get(1);

	  // Convert Option type to Result type
	  let arg_value: Result<&String, CliError> = if let Some(arg) = argument {
	      println!("argument is {}", arg);
	      Ok(arg)
	  } else {
	      println!("uh oh, we did not get an argument");
	      Err(CliError::NoArgument)
	  };

	  // do a bunch of other stuff
	  println!("arg_value is: {:?}", arg_value);

	  Ok(())
      }
  }
#+end_src

** Grab the value inside

#+begin_src rust
  /// 8a.rs

  impl Cli {
      pub fn run(&self, args: &Vec<String>) -> Result<(), CliError> {
	  let argument: Option<&String> = args.get(1);

	  // Convert Option type to Result type
	  let arg_value: Result<&String, CliError> = if let Some(arg) = argument {
	      println!("argument is {}", arg);
	      Ok(arg)
	  } else {
	      println!("uh oh, we did not get an argument");
	      Err(CliError::NoArgument)
	  };

	  println!("arg_value is: {:?}", arg_value);

	  // Either get the value or TERMINATE function
	  let unwrapped_arg_value = match arg_value {
	      Ok(arg) => arg,
	      Err(e) => {
		  return Err(e);
	      }
	  };

	  // do a bunch of other stuff
	  println!("unwrapped_arg value is: {}", unwrapped_arg_value);

	  Ok(())
      }
  }
#+end_src

** A simpler way

#+begin_src rust
  /// 8b.rs

  impl Cli {
      pub fn run(&self, args: &Vec<String>) -> Result<(), CliError> {
	  let argument: Option<&String> = args.get(1);

	  // Convert Option type to Result type
	  let unwrapped_arg_value = argument.ok_or(CliError::NoArgument)?;

	  // do a bunch of other stuff
	  println!("unwrapped_arg value is: {}", unwrapped_arg_value);

	  Ok(())
      }
  }
#+end_src

What's new
- `ok_or` transforms an `Option` type to a `Result` type
- `?` operator propogates errors (unwrap or return error)

* 9. Adding Flags

#+begin_src rust
  //! Simple argument parsing library created for CSC rust workshop

  /// Main driver for cli parsing
  pub struct Cli {
      /// Name of the command line application. This will be used in help messages
      pub program_name: String,
      /// List of flags to parse
      pub flags: Vec<Flag>,
  }

  /// Description for parseable flag
  pub struct Flag {
      /// Help message output for this flag
      pub help: String,
      /// Is the flag is required to be passed
      pub required: bool,
      /// Mandatory long flag identifier. For example `--verbose`
      pub long: String,
      /// Optional short flag identifier. For example `-v`
      pub short: Option<char>,
  }

  impl Flag {
      /// Create a new flag object
      pub fn new(long: String) -> Self {
	  Flag {
	      help: String::new(),
	      required: false,
	      long,
	      short: None,
	  }
      }
  }
#+end_src

What's new
- Doc strings
- Struct field ellision (`long` instead of `long: long`)

* 10. Builder pattern

#+begin_src rust

  pub struct FlagBuilder {
      pub help: Option<String>,
      pub required: Option<bool>,
      pub long: String,
      pub short: Option<char>,
  }

  pub struct Flag {
      pub help: String,
      pub required: bool,
      pub long: String,
      pub short: Option<char>,
  }

  impl FlagBuilder {
      pub fn new(long: String) -> Self {
	  FlagBuilder {
	      help: None,
	      required: None,
	      long,
	      short: None,
	  }
      }
      pub fn help(mut self, help: String) -> Self {
	  self.help = Some(help);
	  self
      }
      pub fn required(mut self) -> Self {
	  self.required = Some(true);
	  self
      }
      pub fn short(mut self, short: char) -> Self {
	  self.short = Some(short);
	  self
      }
  }

  impl Flag {}

  fn main() {
      let my_flag = FlagBuilder::new("verbose".into())
	  .short('v')
	  .help("enable verbose logging mode".into())
	  .required();
  }
#+end_src

What's new
- Builder pattern
- Taking `&mut self` as parameter and return type

* 11. Implementing build()

#+begin_src rust
  /// 11.rs

  #[derive(Debug)]
  pub struct FlagBuilder {
      pub help: Option<String>,
      pub required: Option<bool>,
      pub long: String
      pub short: Option<char>,
  }

  impl FlagBuilder {
      pub fn new(long: String) -> Self {
	  FlagBuilder {
	      help: None,
	      required: None,
	      long,
	      short: None,
	  }
      }
      pub fn build(self) -> Result<Flag, CliError> {
	  Ok(Flag {
	      help: self.help.unwrap_or(String::new()),
	      required: self.required.unwrap_or(false),
	      long: self.long,
	      short: self.short,
	  })
      }
  }

  fn main() {
      let flag_1 = FlagBuilder::new("verbose".into())
	  .short('v')
	  .help("enable verbose logging mode".into())
	  .required();

      println!("flag_1: {:?}", flag_1);

      let flag_1_built = flag_1.build();

      println!("flag_1_built: {:?}", flag_1_built);

      let flag_2_built = FlagBuilder::new("help".into())
	  .short('h')
	  .build();

      println!("flag_2_built: {:?}", flag_2_built);
  }
#+end_src

What's new
- `unwrap_or()`
- What if we want to make something mandatory? Alternative with `new()` taking no parameters

* 12. Using the rust-derive-builder crate

** Reducing boilerplate

This was a relatively simple builder pattern implementation, but it was already quite repetitive.

We can once again use rust macros to help us generate code: https://github.com/colin-kiegel/rust-derive-builder

** Adding dependency to Cargo.toml

#+begin_src yaml
  [package]
  name = "argparse"
  version = "0.1.0"
  edition = "2021"
  authors = ["Daniel Liu"]
  description = "simple argparser created for CSC rust workshop"
  repository = "https://github.com/MrPicklePinosaur/rust_workshop"
  license = "MIT OR Apache-2.0"

  [dependencies]
  rust-derive-builder = { version = "0.11" }
#+end_src

** Using the crate

#+begin_src rust

  #[macro_use]
  extern crate derive_builder;

  #[derive(Builder)]
  pub struct Flag {
      pub help: String,
      pub required: bool,
      pub long: String
      pub short: Option<char>,
  }

#+end_src

What's new
- Using crates

* 13. Implementing flag parsing

** Part I: Basic parsing

#+begin_src rust
  /// 13a.rs 

  #[derive(Default, Debug)]
  pub struct FlagParse {
      flags: Vec<Flag>,
      args: Vec<String>,
  }

  impl Cli {
      pub fn run(&self, args: &Vec<String>) -> Result<FlagParse, CliError> {
	  let mut flagparse = FlagParse::default();

	  let mut arg_it = args.iter();

	  // skip first item
	  arg_it.next().ok_or(CliError::NoProgramName)?;

	  for arg in arg_it {
	      println!("argument {}", arg);
	  }

	  Ok(flagparse)
      }
  }

  fn main() {
      let args: Vec<String> = std::env::args().collect();

      let cli = Cli {
	  program_name: "my cli".to_string(),
	  flags: vec![
	      FlagBuilder::new("verbose".into())
		  .short('v')
		  .help("enable verbose logging mode".into())
		  .required()
		  .build()
		  .unwrap(),
	      FlagBuilder::new("help".into()).short('h').build().unwrap(),
	  ],
      };

      let flagparse = cli.run(&args).unwrap();
      println!("{:?}", flagparse);
  }

#+end_src

What's new
- `Default` trait
- Iterators
- `vec!` macro
- `unwrap()`

** Part II: Type of argument

#+begin_src rust
  /// 13b.rs

  impl Cli {
      pub fn run(&self, args: &Vec<String>) -> Result<FlagParse, CliError> {
	  let mut flagparse = FlagParse::default();

	  let mut arg_it = args.iter();

	  // skip first item
	  arg_it.next().ok_or(CliError::NoProgramName)?;

	  for arg in arg_it {

	      // Decide if arg is a long flag, short flag, or a position argument
	      let flag: Option<&Flag> = if arg.starts_with("--") {
		  println!("We found a short flag");
                  self.flags.iter().find(|f| f.long == arg[2..].to_string())
	      } else if arg.starts_with("-") {
		  println!("We found a long flag");
		  self.flags.iter().find(|f| f.short == arg.chars().nth(1))
	      } else {
		  println!("We found an argument");
		  flagparse.args.push(arg.to_owned());
		  continue;
	      };
	  }

	  println!("value of flag: {:?}", flag);

	  Ok(flagparse)
      }
  }

#+end_src

What's new
- `continue` keyword
- the never (`!`) type

** Part III: Error handling

#+begin_src rust
  /// 13c.rs

  #[derive(Debug)]
  pub enum CliError {
      NoProgramName,
      NoArgument,
      InvalidFlag(String),
  }

  impl std::fmt::Display for CliError {
      fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
	  match self {
	      Self::NoProgramName => write!(f, "Program name not supplied"),
	      Self::NoArgument => write!(f, "Argument not supplied"),
	      Self::InvalidFlag(v) => write!(f, "Invalid flag: {}", v),
	  }
      }
  }

  impl Cli {
      pub fn run(&self, args: &Vec<String>) -> Result<FlagParse, CliError> {
	  let mut flagparse = FlagParse::default();

	  let mut arg_it = args.iter();

	  // skip first item
	  arg_it.next().ok_or(CliError::NoProgramName)?;

	  for arg in arg_it {
	      // Decide if arg is a long flag, short flag, or a position argument
	      let flag: Option<&Flag> = if arg.starts_with("--") {
		  self.flags.iter().find(|f| f.long == arg[2..].to_string())
	      } else if arg.starts_with("-") {
		  self.flags.iter().find(|f| f.short == arg.chars().nth(1))
	      } else {
		  flagparse.args.push(arg.to_owned());
		  continue;
	      };

	      let flag: &Flag = flag.ok_or(CliError::InvalidFlag(arg.to_owned()))?;

	      flagparse.flags.push(flag.clone());
	  }

	  Ok(flagparse)
      }
  }
#+end_src

What's new
- Variable shadowing
- Enum can hold values (enums are more like unions)

* 14. Get info from FlagParse

#+begin_src rust
  /// 14.rs

  #[derive(Default)]
  pub struct FlagParse {
      flags: Vec<Flag>,
      args: Vec<String>,
  }

  impl FlagParse {
      pub fn get_flag(&self, long: &str) -> bool {
	  self.flags.iter().find(|f| f.long.eq(long)).is_some()
      }

      pub fn args(&self) -> &Vec<String> {
	  &self.args
      }
  }

  fn main() {
      let args: Vec<String> = std::env::args().collect();

      let cli = Cli {
	  program_name: "my cli".to_string(),
	  flags: vec![
	      FlagBuilder::new("verbose".into())
		  .short('v')
		  .help("enable verbose logging mode".into())
		  .required()
		  .build()
		  .unwrap(),
	      FlagBuilder::new("help".into()).short('h').build().unwrap(),
	  ],
      };

      let flagparse = cli.run(&args).unwrap();

      if flagparse.get_flag("help") {
	  println!("this is the help message");
	  return;
      }

      for arg in flagparse.args() {
	  if flagparse.get_flag("verbose") {
	      println!("argument: {}", arg);
	  } else {
	      println!("{}", arg);
	  }
      }
  }
#+end_src

* We are Done!

What we did not cover
- modules
- lifetimes
- defining your own traits
- writing tests
